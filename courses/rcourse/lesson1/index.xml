<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lesson 1 | Joseph M. Westenberg</title>
    <link>/courses/rcourse/lesson1/</link>
      <atom:link href="/courses/rcourse/lesson1/index.xml" rel="self" type="application/rss+xml" />
    <description>Lesson 1</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Joseph Westenberg 2021</copyright><lastBuildDate>Fri, 05 Feb 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_huc1be9e4e3ae24305730dfe0ccc5f8623_97775_512x512_fill_lanczos_center_2.png</url>
      <title>Lesson 1</title>
      <link>/courses/rcourse/lesson1/</link>
    </image>
    
    <item>
      <title>Writing Loops</title>
      <link>/courses/rcourse/lesson1/lesson1_01/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_01/</guid>
      <description>


&lt;p&gt;We will be using &lt;a href=&#34;https://www.bls.gov/lau/home.htm&#34;&gt;county level employment/labor force data from BLS&lt;/a&gt;. We will be using the &lt;strong&gt;Labor force data by county, yearly annual averages&lt;/strong&gt;. There is data from 1990-2019 (as of writing these notes). To start we are going to download this data and then read it into R.&lt;/p&gt;
&lt;p&gt;We could download these all one by one, or we could write a simple loop to read them in for us. To do this let’s first look at a very simple loop structure:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;letters&amp;lt;-c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;)  # 1
letters_l&amp;lt;-length(letters)           # 2
for (i in 1:letters_l){              # 3
  print(letters[i])                  # 4
}                                    # 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot;
## [1] &amp;quot;b&amp;quot;
## [1] &amp;quot;c&amp;quot;
## [1] &amp;quot;d&amp;quot;
## [1] &amp;quot;e&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going line by line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1: Define a vector of letters.&lt;/li&gt;
&lt;li&gt;Line 2: Report the number of elements in our letter vector and save as letters_l&lt;/li&gt;
&lt;li&gt;Line 3: Defining for loop. Our index will be i, and it will run from 0 to however long letters vector is (try adding some more letters!) Note our for loop action is defined within the curly braces.&lt;/li&gt;
&lt;li&gt;Line 4: For every i defined in Line 3 we want to print the corresponding element in the vector letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, great. How does this help us with reading in the data? We’ll get to that in the next section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>String Manipulation</title>
      <link>/courses/rcourse/lesson1/lesson1_02/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_02/</guid>
      <description>


&lt;div id=&#34;string-concatenation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String Concatenation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&amp;lt;-&amp;quot;This is a the start&amp;quot;  # 1
b&amp;lt;-&amp;quot;of a sentence&amp;quot;        # 2
print(paste0(a,b))        # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the startof a sentence&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(a,b))  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the start of a sentence&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we define a and b as strings. What paste and paste0 do are combine these strings into one string. We can see that paste places a space between the two strings while paste0 does not. paste0 comes in quite handy for working with file pathing as we will see. Yes it’s that easy!&lt;/p&gt;
&lt;p&gt;We will not be using this for this project but it may be useful to know we can concatenate two vectors of strings as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&amp;lt;-c(&amp;quot;This is a the start&amp;quot;, &amp;quot;Now we have&amp;quot;, &amp;quot;This really is&amp;quot;, &amp;quot;Economics is&amp;quot;)  # 1
b&amp;lt;-c(&amp;quot;of a sentence.&amp;quot;, &amp;quot;another sentence.&amp;quot;, &amp;quot;quite handy.&amp;quot;, &amp;quot;awesome!&amp;quot;)       # 2
print(paste(a,b))                                                             # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the start of a sentence.&amp;quot; &amp;quot;Now we have another sentence.&amp;quot;     
## [3] &amp;quot;This really is quite handy.&amp;quot;        &amp;quot;Economics is awesome!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;string-padding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String Padding&lt;/h2&gt;
&lt;p&gt;Consider we have a vector of numbers which currently runs 1-19. Now what if we need all the ‘single character’ digits to have a leading zero. That is instead of “1” we need “01”.&lt;/p&gt;
&lt;p&gt;We could use paste0 as above and combine a 0 with our vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbvec&amp;lt;-as.character(1:19)  # 1
print(paste0(&amp;quot;0&amp;quot;, numbvec))  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;01&amp;quot;  &amp;quot;02&amp;quot;  &amp;quot;03&amp;quot;  &amp;quot;04&amp;quot;  &amp;quot;05&amp;quot;  &amp;quot;06&amp;quot;  &amp;quot;07&amp;quot;  &amp;quot;08&amp;quot;  &amp;quot;09&amp;quot;  &amp;quot;010&amp;quot; &amp;quot;011&amp;quot; &amp;quot;012&amp;quot;
## [13] &amp;quot;013&amp;quot; &amp;quot;014&amp;quot; &amp;quot;015&amp;quot; &amp;quot;016&amp;quot; &amp;quot;017&amp;quot; &amp;quot;018&amp;quot; &amp;quot;019&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we don’t want a leading 0 in front of the double ‘character’ digits (ie We DON’T want “090”). We could break our vector into single character digits and two character digits, manipulate the single character digits, then combine it back in with the double character digits. But there is an easier way: str_pad !&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(stringr)  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: stringr&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbvec&amp;lt;-as.character(1:19)                # 1
print(str_pad(numbvec, 2, &amp;quot;left&amp;quot;, &amp;quot;0&amp;quot;)  )  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;01&amp;quot; &amp;quot;02&amp;quot; &amp;quot;03&amp;quot; &amp;quot;04&amp;quot; &amp;quot;05&amp;quot; &amp;quot;06&amp;quot; &amp;quot;07&amp;quot; &amp;quot;08&amp;quot; &amp;quot;09&amp;quot; &amp;quot;10&amp;quot; &amp;quot;11&amp;quot; &amp;quot;12&amp;quot; &amp;quot;13&amp;quot; &amp;quot;14&amp;quot; &amp;quot;15&amp;quot;
## [16] &amp;quot;16&amp;quot; &amp;quot;17&amp;quot; &amp;quot;18&amp;quot; &amp;quot;19&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this looks like what we want! But what is str_pad doing? With str_pad we are telling stringr we want all elements of numbvec to be of length 2. So stringr checks to see if the elements are less than 2 characters, if an element is it adds “0”’s to the left side until it reaches length 2. If it is already length 2, it will leave it alone.&lt;/p&gt;
&lt;p&gt;There is many other handy commands to deal with strings in R. These are just a couple of commands we will be using. I will be writing a post with some other handy functions in the coming weeks and will link it here.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Project Organization</title>
      <link>/courses/rcourse/lesson1/lesson1_03/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_03/</guid>
      <description>


&lt;p&gt;Before we get started, let’s set up a folder for our project and create subfolders to keep things organized. For this project I recommend the following subfolders, which are a good minimum for organizing any project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;raw_data: This is where we will put our `preprocessed’ data we will be getting from MIT Election Lab.&lt;/li&gt;
&lt;li&gt;scripts: Where we will save all of our R-scripts in this folder&lt;/li&gt;
&lt;li&gt;processed_data: If we want to save some intermediate data steps between raw data and our output.&lt;/li&gt;
&lt;li&gt;tables: Any tex tables we generate we will save to this folder&lt;/li&gt;
&lt;li&gt;figures: Any figures we generate we will save to this folder&lt;/li&gt;
&lt;li&gt;tex: Where we can have our paper and/or presentations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can make more folders if you feel it keeps you organized. The main point I want to make here is it is well worth your time to think about how you want to organize your project. Oftentimes if we jump right in without a plan, things become a jumbled mess. (If you want to go further with your organization strategies, I recommend looking into waf, specifically check out &lt;a href=&#34;https://econ-project-templates.readthedocs.io/en/stable/index.html&#34;&gt;Templates for Reproducible Research Projects in Economics&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;My project folder now looks like this:
&lt;img src=&#34;/img/rcourse/folders.PNG&#34; alt=&#34;WD Folder&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;first-r-script&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;First R script!&lt;/h3&gt;
&lt;p&gt;Now that we have our folders created, let’s now create paths to those folders with R. Let’s start by creating a variable workingdir which we can define as the path to our main folder.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;workingdir&amp;lt;-&amp;quot;PATH_TO_YOUR_WORKING_DIR&amp;quot;  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are going to create a script, let’s save it as workingdir.R and place it in our main parent folder. We are then going to be using the path we defined above in this script to create paths to our other folders.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;folder_figures&amp;lt;-paste0(workingdir, &amp;quot;figures&amp;quot;)                # 1
folder_processed_data&amp;lt;-paste0(workingdir, &amp;quot;processed_data&amp;quot;)  # 2
folder_raw_data&amp;lt;-paste0(workingdir, &amp;quot;raw_data&amp;quot;)              # 3
folder_scripts&amp;lt;-paste0(workingdir, &amp;quot;scripts&amp;quot;)                # 4
folder_tables&amp;lt;-paste0(workingdir, &amp;quot;tables&amp;quot;)                  # 5
folder_tex&amp;lt;-paste0(workingdir, &amp;quot;tex&amp;quot;)                        # 6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the top of all other scripts we can have:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;workingdir&amp;lt;-&amp;quot;PATH_TO_YOUR_WORKING_DIR&amp;quot;    # 1
source(paste0(workingdir, workingdir.r))  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all this says is we have a variable named workingdir that points to our main parent folder. We then have a script in which we define paths to all other folders. With this at the front of all of our scripts, we can easily reference them to create easier pathing for ourselves.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Downloading/Reading Data</title>
      <link>/courses/rcourse/lesson1/lesson1_04/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_04/</guid>
      <description>


&lt;div id=&#34;downloading-within-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading within R&lt;/h2&gt;
&lt;p&gt;We can use R to with a direct link to download. The first argument the download.file() command takes that we will use is the url of the xslx document and the second argument is the destination it will be saved. The last argument is basically telling R that the excel docs are not plain text. (Don’t forget to have workingdir defined as we did in &lt;a href=&#34;https://jmwestenberg.github.io/courses/rcourse/lesson1/lesson1_01/&#34;&gt;Lesson 1.1&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://www.bls.gov/lau/laucnty90.xlsx&amp;quot;,     # 1
  paste0(folder_raw_data, &amp;quot;bls_unemp_90.xlsx&amp;quot;), mode=&amp;quot;wb&amp;quot;)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-in-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading in Data&lt;/h2&gt;
&lt;p&gt;Before we read in this data to R, let’s see what we are dealing with. Opening up the file in excel we can see there will be issues reading the file in.
&lt;img src=&#34;/img/rcourse/data_head.PNG&#34; alt=&#34;data head&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can notice that the first row has the file title spread across columns A:J. Variable names are spread across anywhere 1-3 rows. And lastly we have an empty column in F. The bright side is if we observe the other year’s files, they all have this exact same structure. Hence we will able to use a loop eventually to clean them all instead of one at a time.&lt;/p&gt;
&lt;p&gt;The main package we will be using is readxl, which is quite self explanatory. It is a package meant to help to read in excel docs. Let’s try to open the file for 1990 we downloaded in R. We can do this through R Studio’s functionality.&lt;/p&gt;
&lt;p&gt;Within the “Environment” area of R Studio, click Import Dataset, then From Excel…
&lt;img src=&#34;/img/rcourse/import_fromexcel.PNG&#34; alt=&#34;import&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is definitely multiple ways to do this, as we can see from the options available. I first deselect “First Row as Names” (This option is very nice if your data is already in a precleaned form and your first row simply has your variable names.) I then begin to skip rows, 5 rows of skipping leads to the first row being the first row of data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/rcourse/import_fromexceloptions.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next we can handle column F that we noticed was blank. This is column 6 and stays consistent across all years (you can check this). Remembering our lessons from the Very Basics section we can subset this dataframe by removing column 6.&lt;/p&gt;
&lt;p&gt;Hence we have something that will look like the following for our command for our script.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(readxl)                                                                                                                                    # 1
workingdir&amp;lt;-&amp;quot;C:/Users/weste/Documents/GitHub/Rcourse&amp;quot;                                                                                              # 2
bls_unemp_90 &amp;lt;- read_excel(paste0(folder_raw_data, &amp;quot;/bls_unemp_90.xlsx&amp;quot;), col_names=FALSE, skip=5)                                                 # 3
bls_unemp_90&amp;lt;-bls_unemp_90[,-6]                                                                                                                    # 4
colnames(bls_unemp_90)&amp;lt;-c(&amp;quot;LAUS_code&amp;quot;, &amp;quot;State_fips&amp;quot;, &amp;quot;County_fips&amp;quot;, &amp;quot;County_name&amp;quot;, &amp;quot;Year&amp;quot;, &amp;quot;Labor_force&amp;quot;, &amp;quot;Employed&amp;quot;, &amp;quot;Unemployed&amp;quot;, &amp;quot;Unemp_rate&amp;quot;)  # 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the last line above we are giving our columns names based on the names we saw in the excel document.&lt;/p&gt;
&lt;p&gt;We can then observe our data frame to ssee if it’s fully cleaned. At first it seems so (I actually initially thought so). However when reading in the data, we grabbed 2 extra rows at the end of the file. Hence we have 2 rows at the end of our data frame that are NA’s. Let’s drop these two rows, to do this we can use a command is.na and prior to it include an “!”, saying ‘not is.na’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bls_unemp_90&amp;lt;-bls_unemp_90[!is.na(bls_unemp_90$State_fips),]  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;downloadingreading-data-in-a-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading/Reading Data in a Loop&lt;/h2&gt;
&lt;p&gt;Here is a good place to pause if you want a challenge. You should have all the tools needed to write a loop to download all files from 1990-2019.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Download Loop</title>
      <link>/courses/rcourse/lesson1/lesson1_05/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_05/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(stringr)                                                                # 1
require(readxl)                                                                 # 2
unemp_data&amp;lt;-data.frame()                                                        # 3
years&amp;lt;-c(90:99, 0:19)                                                           # 4
years&amp;lt;-str_pad(as.character(years), 2, &amp;quot;left&amp;quot;, &amp;quot;0&amp;quot;)                             # 5
years_l&amp;lt;-length(years)                                                          # 6
for (i in 1:years_l){                                                           # 7
url&amp;lt;-paste0(&amp;quot;https://www.bls.gov/lau/laucnty&amp;quot;, years[i], &amp;quot;.xlsx&amp;quot;)               # 8
destination&amp;lt;-paste0(folder_raw_data, &amp;quot;/bls_unemp_&amp;quot;, years[i], &amp;quot;.xlsx&amp;quot;)          # 9
download.file(url, destination, mode=&amp;quot;wb&amp;quot;)                                     # 10
temp_df &amp;lt;- read_excel(paste0(folder_raw_data, &amp;quot;/bls_unemp_&amp;quot;, years[i],         # 11
  &amp;quot;.xlsx&amp;quot;),col_names=FALSE, skip=5)                                            # 12
temp_df&amp;lt;-temp_df[,-6]                                                          # 13
colnames(temp_df)&amp;lt;-c(&amp;quot;LAUS_code&amp;quot;, &amp;quot;State_fips&amp;quot;, &amp;quot;County_fips&amp;quot;, &amp;quot;County_name&amp;quot;,  # 14
  &amp;quot;Year&amp;quot;, &amp;quot;Labor_force&amp;quot;, &amp;quot;Employed&amp;quot;, &amp;quot;Unemployed&amp;quot;, &amp;quot;Unemp_rate&amp;quot;)               # 15
temp_df&amp;lt;-temp_df[!is.na(temp_df$State_fips),]                                  # 16
unemp_data&amp;lt;-rbind(county_data, temp_df)                                        # 17
}                                                                              # 18
filename&amp;lt;-paste0(folder_processed_data, &amp;quot;/unemp_data.rda&amp;quot;)                     # 19
save(unemp_data, file=filename)                                                # 20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First let’s think what we are trying to achieve. The links for the downloads are all in the form of &lt;a href=&#34;https://www.bls.gov/lau/laucntyZZ.xlsx&#34; class=&#34;uri&#34;&gt;https://www.bls.gov/lau/laucntyZZ.xlsx&lt;/a&gt;, where ZZ is two digits representing the year. These ZZ values run from “90”to “99” for years 1990-1999 and “00” to “19” for years 2000-2019.&lt;/p&gt;
&lt;p&gt;Let’s work through the above code line by line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines #1 &amp;amp; #2: load required packages.&lt;/li&gt;
&lt;li&gt;Line #3: Declare unemp_data will be a data.frame. Right now it is empty, but we will add to it.&lt;/li&gt;
&lt;li&gt;Line #4: Define a vector with elements 90-99 and 0-19. (Which will correspond to the years that we will pull)&lt;/li&gt;
&lt;li&gt;Line #5 : We have a vector for years, however if we notice in the url names we need this vector to include a leading 0 in front of the single ‘character’ digits (ie “01” instead of “1”). But we don’t want a leading 0 in front of the double ‘character’ digits (ie We DON’T want “090”). Go back to the &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1/lesson1_03/&#34;&gt;String Manipulation&lt;/a&gt; section if you need to refresh on this.&lt;/li&gt;
&lt;li&gt;Line #6 : Calculate the length of years and save as years_l&lt;/li&gt;
&lt;li&gt;Line #7 : See &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1/lesson1_02/&#34;&gt;String Manipulation&lt;/a&gt; if defining the for loop does not make sense.&lt;/li&gt;
&lt;li&gt;Line #8 : We are creating the character string for the url for the download link. Since they all take the form of &lt;a href=&#34;https://www.bls.gov/lau/laucntyZZ.xlsx&#34; class=&#34;uri&#34;&gt;https://www.bls.gov/lau/laucntyZZ.xlsx&lt;/a&gt;, we can use one element of our years vector at a time. (See &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1/lesson1_03/&#34;&gt;String Manipulation&lt;/a&gt; for explanation on paste0)&lt;/li&gt;
&lt;li&gt;Line #9 : This is of similar spirit to line #4, but this is defining the path/filename of the excel file we will save.&lt;/li&gt;
&lt;li&gt;Line #10 : This line is just telling R to download the file at that url, save it to the defined location/name, and to read it as a non-raw text form. (see &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1_04/&#34;&gt;Downloading/Reading Data&lt;/a&gt; if unclear.)&lt;/li&gt;
&lt;li&gt;Lines #11-#16: See &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1/lesson1_04/&#34;&gt;Downloading/Reading Data&lt;/a&gt; for a direct explanation.&lt;/li&gt;
&lt;li&gt;Line #17: rbind appends data. Hence since all of our data has the same format and has a variable indicating the year, we can simply append.&lt;/li&gt;
&lt;li&gt;Line #19: Create the filepath (to our processed_data folder) where we will save the file, what the file name and type is.&lt;/li&gt;
&lt;li&gt;Line #20: save the combined data to the location/name we defined above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now have our data cleaned and saved for our next lesson when we will start to work with it more!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
