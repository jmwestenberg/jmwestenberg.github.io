<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lesson 0 | Joseph M. Westenberg</title>
    <link>/courses/rcourse/lesson0/</link>
      <atom:link href="/courses/rcourse/lesson0/index.xml" rel="self" type="application/rss+xml" />
    <description>Lesson 0</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Joseph Westenberg 2021</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_huc1be9e4e3ae24305730dfe0ccc5f8623_97775_512x512_fill_lanczos_center_2.png</url>
      <title>Lesson 0</title>
      <link>/courses/rcourse/lesson0/</link>
    </image>
    
    <item>
      <title>Very Basics</title>
      <link>/courses/rcourse/lesson0/lesson0_01/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson0/lesson0_01/</guid>
      <description>


&lt;p&gt;I assume you have R installed and running. There are plenty of guides online on how to do this.&lt;/p&gt;
&lt;p&gt;Let’s first define some arrays within R.&lt;/p&gt;
&lt;p&gt;These can be numeric based, in this case integer.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;A&amp;lt;-c(5,6,7)  # 1
B&amp;lt;-c(7,8,9)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s dig into what is going on a bit more. We are telling R to define a vector, this is the c( ) part, with elements 1,2,3 and give that vector a name A. The backwards arrow tells R what is the name and what is the element we are defining.&lt;/p&gt;
&lt;p&gt;We can make character based vectors as well.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;C&amp;lt;-c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)  # 1
D&amp;lt;-c(&amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then combine these vectors into a dataframe (this is relevant for when we start thinking about reading in/manipulating actual data). Since all of our vectors are length three, we can easily create a dataframe (think a matrix) where our column names will be the name of the vectors, and the rows will be the elements of the vectors.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;first_dataframe&amp;lt;-data.frame(A,B,C,D)  # 1
print(first_dataframe)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 2 6 8 b e
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now first_dataframe is going to be of similar format as we will typically have when we read in data from excel files into R. We can access certain rows and columns within the dataframe by putting square brackets after the name of the dataframe. For example if we wanted to print the element in the first row and first column, we could define the variable x as this and then print x. (Keep in mind the ordering is rows, columns)&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[1,1]  # 1
print(x)                 # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we wanted to print &lt;strong&gt;all&lt;/strong&gt; elements in the first row, we just leave the column (after the comma) blank:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[1,]  # 1
print(x)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How about 1st &amp;amp; 3rd row?&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[c(1,3),]  # 1
print(x)                     # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to do this is to define another variable, say y as a vector with elements 1 and 3. Notice how the below output is the same as the above.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;y&amp;lt;-c(1,3)               # 1
x&amp;lt;-first_dataframe[y,]  # 2
print(x)                # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do the same thing for the columns (we need to remember the order for the square brackets are rows, columns). Note: if we put a negative sign in front of these commands in the brackets, instead “keeping” certain rows or columns, it means remove! That is if in the below command we have -3, it would be saying REMOVE column 3!&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[,3]   # 1
y&amp;lt;-first_dataframe[,-3]  # 2
print(x)                 # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a b c
## Levels: a b c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;print(y)  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B D
## 1 5 7 d
## 2 6 8 e
## 3 7 9 f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our third column is named C, we can also pull this column by referencing it’s name after a dollar sign, such as:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe$C  # 1
print(x)              # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a b c
## Levels: a b c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may not sound useful now, but think if we have many columns of variables, say wage, hoursworked, fulltime, and hundreds of more. We don’t want to have to find what column number hoursworked is, we can just reference this column name.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
