<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction | Joseph M. Westenberg</title>
    <link>/courses/rcourse/</link>
      <atom:link href="/courses/rcourse/index.xml" rel="self" type="application/rss+xml" />
    <description>Introduction</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Joseph Westenberg 2021</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/logo_huc1be9e4e3ae24305730dfe0ccc5f8623_97775_300x300_fit_lanczos_2.png</url>
      <title>Introduction</title>
      <link>/courses/rcourse/</link>
    </image>
    
    <item>
      <title>Very Basics</title>
      <link>/courses/rcourse/lesson0_01/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson0_01/</guid>
      <description>


&lt;p&gt;I assume you have R installed and running. There are plenty of guides online on how to do this.&lt;/p&gt;
&lt;p&gt;Let’s first define some arrays within R.&lt;/p&gt;
&lt;p&gt;These can be numeric based, in this case integer.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;A&amp;lt;-c(5,6,7)  # 1
B&amp;lt;-c(7,8,9)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s dig into what is going on a bit more. We are telling R to define a vector, this is the c( ) part, with elements 1,2,3 and give that vector a name A. The backwards arrow tells R what is the name and what is the element we are defining.&lt;/p&gt;
&lt;p&gt;We can make character based vectors as well.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;C&amp;lt;-c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)  # 1
D&amp;lt;-c(&amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then combine these vectors into a dataframe (this is relevant for when we start thinking about reading in/manipulating actual data). Since all of our vectors are length three, we can easily create a dataframe (think a matrix) where our column names will be the name of the vectors, and the rows will be the elements of the vectors.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;first_dataframe&amp;lt;-data.frame(A,B,C,D)  # 1
print(first_dataframe)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 2 6 8 b e
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now first_dataframe is going to be of similar format as we will typically have when we read in data from excel files into R. We can access certain rows and columns within the dataframe by putting square brackets after the name of the dataframe. For example if we wanted to print the element in the first row and first column, we could define the variable x as this and then print x. (Keep in mind the ordering is rows, columns)&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[1,1]  # 1
print(x)                 # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we wanted to print &lt;strong&gt;all&lt;/strong&gt; elements in the first row, we just leave the column (after the comma) blank:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[1,]  # 1
print(x)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How about 1st &amp;amp; 3rd row?&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[c(1,3),]  # 1
print(x)                     # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to do this is to define another variable, say y as a vector with elements 1 and 3. Notice how the below output is the same as the above.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;y&amp;lt;-c(1,3)               # 1
x&amp;lt;-first_dataframe[y,]  # 2
print(x)                # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do the same thing for the columns (we need to remember the order for the square brackets are rows, columns).&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[,3]  # 1
print(x)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a b c
## Levels: a b c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our third column is named C, we can also pull this column by referencing it’s name after a dollar sign, such as:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe$C  # 1
print(x)              # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a b c
## Levels: a b c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may not sound useful now, but think if we have many columns of variables, say wage, hoursworked, fulltime, and hundreds of more. We don’t want to have to find what column number hoursworked is, we can just reference this column name.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Organization</title>
      <link>/courses/rcourse/lesson1_01/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1_01/</guid>
      <description>


&lt;p&gt;Before we get started, let’s set up a folder for our project and create subfolders to keep things organized. For this project I recommend the following subfolders, which are a good minimum for organizing any project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;raw_data: This is where we will put our `preprocessed’ data we will be getting from MIT Election Lab.&lt;/li&gt;
&lt;li&gt;scripts: Where we will save all of our R-scripts in this folder&lt;/li&gt;
&lt;li&gt;processed_data: If we want to save some intermediate data steps between raw data and our output.&lt;/li&gt;
&lt;li&gt;tables: Any tex tables we generate we will save to this folder&lt;/li&gt;
&lt;li&gt;figures: Any figures we generate we will save to this folder&lt;/li&gt;
&lt;li&gt;tex: Where we can have our paper and/or presentations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can make more folders if you feel it keeps you organized. The main point I want to make here is it is well worth your time to think about how you want to organize your project. Oftentimes if we jump right in without a plan, things become a jumbled mess. (If you want to go further with your organization strategies, I recommend looking into waf, specifically check out &lt;a href=&#34;https://econ-project-templates.readthedocs.io/en/stable/index.html&#34;&gt;Templates for Reproducible Research Projects in Economics&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;My project folder now looks like this:
&lt;strong&gt;Insert image of folder&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now within R let’s set our working directory to point to the main folder we have. It will be convenient to have this at the top of all of your scripts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;workingdir&amp;lt;-&amp;quot;PATH_TO_YOUR_WORKING_DIR&amp;quot;  # 1
setwd(workingdir)                       # 2&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Writing Loops</title>
      <link>/courses/rcourse/lesson1_02/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1_02/</guid>
      <description>


&lt;p&gt;We will be using &lt;a href=&#34;https://www.bls.gov/lau/home.htm&#34;&gt;county level employment/labor force data from BLS&lt;/a&gt;. We will be using the &lt;strong&gt;Labor force data by county, yearly annual averages&lt;/strong&gt;. There is data from 1990-2019 (as of writing these notes). To start we are going to download this data and then read it into R.&lt;/p&gt;
&lt;p&gt;We could download these all one by one, or we could write a simple loop to read them in for us. To do this let’s first look at a very simple loop structure:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;i=1               # 1
repeat{           # 2
print(i)          # 3
if (i==5){break}  # 4
i&amp;lt;-i+1            # 5
}                 # 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
## [1] 2
## [1] 3
## [1] 4
## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going line by line:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We make i the numeric value we will be looping over starting at 1.&lt;/li&gt;
&lt;li&gt;Repeat the action in the curly braces (note be careful, without an exit this will continuously loop)&lt;/li&gt;
&lt;li&gt;Print out the current value that i is taking.&lt;/li&gt;
&lt;li&gt;The break for our loop, when i takes the value 5, exit the loop&lt;/li&gt;
&lt;li&gt;If the line 4 break statement is not true, then increment i by 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taken all together we are printing then incrementing i by one while i is less than or equal to 5.&lt;/p&gt;
&lt;p&gt;Okay, great. How does this help us with reading in the data? We’ll get to that in the next section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Concatenating Strings</title>
      <link>/courses/rcourse/lesson1_03/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1_03/</guid>
      <description>


&lt;p&gt;Before we get into downloading our data. Let’s learn how to concatenate strings in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&amp;lt;-&amp;quot;This is a the start&amp;quot;  # 1
b&amp;lt;-&amp;quot;of a sentence&amp;quot;        # 2
print(paste0(a,b))        # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the startof a sentence&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(a,b))  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the start of a sentence&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we define a and b as strings. What paste and paste0 do are combine these strings into one string. We can see that paste places a space between the two strings while paste0 does not. paste0 comes in quite handy for working with file pathing as we will see. Yes it’s that easy!&lt;/p&gt;
&lt;div id=&#34;noteextras&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Note/Extras&lt;/h2&gt;
&lt;p&gt;We will not be using this for this project but it may be useful to know we can concatenate two vectors of strings as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&amp;lt;-c(&amp;quot;This is a the start&amp;quot;, &amp;quot;Now we have&amp;quot;, &amp;quot;This really is&amp;quot;, &amp;quot;Economics is&amp;quot;)  # 1
b&amp;lt;-c(&amp;quot;of a sentence.&amp;quot;, &amp;quot;another sentence.&amp;quot;, &amp;quot;quite handy.&amp;quot;, &amp;quot;awesome!&amp;quot;)       # 2
print(paste(a,b))                                                             # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the start of a sentence.&amp;quot; &amp;quot;Now we have another sentence.&amp;quot;     
## [3] &amp;quot;This really is quite handy.&amp;quot;        &amp;quot;Economics is awesome!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another command I have used a lot within the&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Downloading in R</title>
      <link>/courses/rcourse/lesson1_04/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1_04/</guid>
      <description>


&lt;p&gt;We can use R to with a direct link to download. The first argument the download.file() command takes that we will use is the url of the xslx document and the second argument is the destination it will be saved. The last argument is basically telling R that the excel docs are not plain text. (Don’t forget to have workingdir defined as we did in &lt;a href=&#34;https://jmwestenberg.github.io/courses/rcourse/lesson1_01/&#34;&gt;Lesson 1.1&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://www.bls.gov/lau/laucnty90.xlsx&amp;quot;,              # 1
  paste0(workingdir, &amp;quot;/raw_data/&amp;quot;, &amp;quot;bls_unemp_90.xlsx&amp;quot;), mode=&amp;quot;wb&amp;quot;)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;downloading-data-in-a-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading Data in a Loop&lt;/h2&gt;
&lt;p&gt;Here is a good place to pause if you want a challenge. You should have all the tools needed to write a loop to download all files from 1990-2019.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Download Loop</title>
      <link>/courses/rcourse/lesson1_05/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1_05/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(stringr)                                                                # 1
years&amp;lt;-c(0:19, 90:99)                                                           # 2
years&amp;lt;-str_pad(as.character(years), 2, &amp;quot;left&amp;quot;, &amp;quot;0&amp;quot;)                             # 3
i=1                                                                             # 4
repeat{                                                                         # 5
url&amp;lt;-paste0(&amp;quot;https://www.bls.gov/lau/laucnty&amp;quot;, years[i], &amp;quot;.xlsx&amp;quot;)               # 6
destination&amp;lt;-paste0(workingdir, &amp;quot;/raw_data/&amp;quot;, &amp;quot;bls_unemp_&amp;quot;, years[i], &amp;quot;.xlsx&amp;quot;)  # 7
download.file(url, destination, mode=&amp;quot;wb&amp;quot;)                                      # 8
if (i==length(years)){break}                                                    # 9
i&amp;lt;-i+1                                                                         # 10
}                                                                              # 11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First let’s think what we are trying to achieve. The links for the downloads are all in the form of &lt;a href=&#34;https://www.bls.gov/lau/laucntyZZ.xlsx&#34; class=&#34;uri&#34;&gt;https://www.bls.gov/lau/laucntyZZ.xlsx&lt;/a&gt;, where ZZ is two digits representing the year. These ZZ values run from “90”to “99” for years 1990-1999 and “00” to “19” for years 2000-2019.&lt;/p&gt;
&lt;p&gt;Let’s work through the above code line by line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line #1: we will be using a package called stringr. Packages allow us to add more functions into R. In line #3 we will be using str_pad from the stringr package.&lt;/li&gt;
&lt;li&gt;Line #2: we can declare vectors by typing two integers separated by a semicolon. (Ex: “1:4” would generate a vector (1,2,3,4)). Here we want to generate a vector that runs 0 through 19, then 90 through 99 (for the years).&lt;/li&gt;
&lt;li&gt;Line #3 : We have a vector for years, however if we notice in the url names we need this vector to include a leading 0 in front of the single ‘character’ digits (ie “01” instead of “1”). But we don’t want a leading 0 in front of the double ‘character’ digits (ie We DON’T want “090”). This is where str_pad comes in handy. So we are converting our numeric vector into a character vector, then saying we want all elements of this character vector to have length 2. This will basically check to see, if the elements are less than 2 characters, it will add “0”’s to the left side until it reaches length 2. If it is already length 2, it will leave it.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
