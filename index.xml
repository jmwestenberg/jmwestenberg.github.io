<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joseph M. Westenberg</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Joseph M. Westenberg</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Joseph Westenberg 2021</copyright><lastBuildDate>Mon, 25 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_huc1be9e4e3ae24305730dfe0ccc5f8623_97775_512x512_fill_lanczos_center_2.png</url>
      <title>Joseph M. Westenberg</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Very Basics</title>
      <link>/courses/rcourse/lesson0/lesson0_01/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson0/lesson0_01/</guid>
      <description>


&lt;p&gt;I assume you have R installed and running. There are plenty of guides online on how to do this.&lt;/p&gt;
&lt;p&gt;Let’s first define some arrays within R.&lt;/p&gt;
&lt;p&gt;These can be numeric based, in this case integer.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;A&amp;lt;-c(5,6,7)  # 1
B&amp;lt;-c(7,8,9)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s dig into what is going on a bit more. We are telling R to define a vector, this is the c( ) part, with elements 1,2,3 and give that vector a name A. The backwards arrow tells R what is the name and what is the element we are defining.&lt;/p&gt;
&lt;p&gt;We can make character based vectors as well.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;C&amp;lt;-c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)  # 1
D&amp;lt;-c(&amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then combine these vectors into a dataframe (this is relevant for when we start thinking about reading in/manipulating actual data). Since all of our vectors are length three, we can easily create a dataframe (think a matrix) where our column names will be the name of the vectors, and the rows will be the elements of the vectors.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;first_dataframe&amp;lt;-data.frame(A,B,C,D)  # 1
print(first_dataframe)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 2 6 8 b e
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now first_dataframe is going to be of similar format as we will typically have when we read in data from excel files into R. We can access certain rows and columns within the dataframe by putting square brackets after the name of the dataframe. For example if we wanted to print the element in the first row and first column, we could define the variable x as this and then print x. (Keep in mind the ordering is rows, columns)&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[1,1]  # 1
print(x)                 # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we wanted to print &lt;strong&gt;all&lt;/strong&gt; elements in the first row, we just leave the column (after the comma) blank:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[1,]  # 1
print(x)                # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How about 1st &amp;amp; 3rd row?&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[c(1,3),]  # 1
print(x)                     # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to do this is to define another variable, say y as a vector with elements 1 and 3. Notice how the below output is the same as the above.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;y&amp;lt;-c(1,3)               # 1
x&amp;lt;-first_dataframe[y,]  # 2
print(x)                # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B C D
## 1 5 7 a d
## 3 7 9 c f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do the same thing for the columns (we need to remember the order for the square brackets are rows, columns). Note: if we put a negative sign in front of these commands in the brackets, instead “keeping” certain rows or columns, it means remove! That is if in the below command we have -3, it would be saying REMOVE column 3!&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe[,3]   # 1
y&amp;lt;-first_dataframe[,-3]  # 2
print(x)                 # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a b c
## Levels: a b c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;print(y)  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   A B D
## 1 5 7 d
## 2 6 8 e
## 3 7 9 f&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our third column is named C, we can also pull this column by referencing it’s name after a dollar sign, such as:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;x&amp;lt;-first_dataframe$C  # 1
print(x)              # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] a b c
## Levels: a b c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may not sound useful now, but think if we have many columns of variables, say wage, hoursworked, fulltime, and hundreds of more. We don’t want to have to find what column number hoursworked is, we can just reference this column name.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Organization</title>
      <link>/courses/rcourse/lesson1/lesson1_01/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_01/</guid>
      <description>


&lt;p&gt;Before we get started, let’s set up a folder for our project and create subfolders to keep things organized. For this project I recommend the following subfolders, which are a good minimum for organizing any project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;raw_data: This is where we will put our `preprocessed’ data we will be getting from MIT Election Lab.&lt;/li&gt;
&lt;li&gt;scripts: Where we will save all of our R-scripts in this folder&lt;/li&gt;
&lt;li&gt;processed_data: If we want to save some intermediate data steps between raw data and our output.&lt;/li&gt;
&lt;li&gt;tables: Any tex tables we generate we will save to this folder&lt;/li&gt;
&lt;li&gt;figures: Any figures we generate we will save to this folder&lt;/li&gt;
&lt;li&gt;tex: Where we can have our paper and/or presentations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can make more folders if you feel it keeps you organized. The main point I want to make here is it is well worth your time to think about how you want to organize your project. Oftentimes if we jump right in without a plan, things become a jumbled mess. (If you want to go further with your organization strategies, I recommend looking into waf, specifically check out &lt;a href=&#34;https://econ-project-templates.readthedocs.io/en/stable/index.html&#34;&gt;Templates for Reproducible Research Projects in Economics&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;My project folder now looks like this:
&lt;img src=&#34;/img/rcourse/folders.png&#34; alt=&#34;WD Folder&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now within R let’s set our working directory to point to the main folder we have. It will be convenient to have this at the top of all of your scripts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;workingdir&amp;lt;-&amp;quot;PATH_TO_YOUR_WORKING_DIR&amp;quot;  # 1
setwd(workingdir)                       # 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line above we are saving the path to our folder as a variable name ‘workingdir’, then we are telling R to be in this folder. That is if we had a data file right within our main folder, we could just simply reference that file without any path and it would open. That’s becaause we are telling R to be living in this folder. Note: this can be changed during your script and R reads your script sequentially, thus you need to make sure that you define your working directory before you are trying to open any files while using these paths. That is why it is always a good idea to start your script with this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Loops</title>
      <link>/courses/rcourse/lesson1/lesson1_02/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_02/</guid>
      <description>


&lt;p&gt;We will be using &lt;a href=&#34;https://www.bls.gov/lau/home.htm&#34;&gt;county level employment/labor force data from BLS&lt;/a&gt;. We will be using the &lt;strong&gt;Labor force data by county, yearly annual averages&lt;/strong&gt;. There is data from 1990-2019 (as of writing these notes). To start we are going to download this data and then read it into R.&lt;/p&gt;
&lt;p&gt;We could download these all one by one, or we could write a simple loop to read them in for us. To do this let’s first look at a very simple loop structure:&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;letters&amp;lt;-c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;)  # 1
letters_l&amp;lt;-length(letters)           # 2
for (i in 1:letters_l){              # 3
  print(letters[i])                  # 4
}                                    # 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot;
## [1] &amp;quot;b&amp;quot;
## [1] &amp;quot;c&amp;quot;
## [1] &amp;quot;d&amp;quot;
## [1] &amp;quot;e&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going line by line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1: Define a vector of letters.&lt;/li&gt;
&lt;li&gt;Line 2: Report the number of elements in our letter vector and save as letters_l&lt;/li&gt;
&lt;li&gt;Line 3: Defining for loop. Our index will be i, and it will run from 0 to however long letters vector is (try adding some more letters!) Not our for loop action is defined within the curly braces.&lt;/li&gt;
&lt;li&gt;Line 4: For every i defined in Line 3 we want to print the corresponding element in the vector letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, great. How does this help us with reading in the data? We’ll get to that in the next section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>String Manipulation</title>
      <link>/courses/rcourse/lesson1/lesson1_03/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_03/</guid>
      <description>


&lt;div id=&#34;string-concatenation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String Concatenation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&amp;lt;-&amp;quot;This is a the start&amp;quot;  # 1
b&amp;lt;-&amp;quot;of a sentence&amp;quot;        # 2
print(paste0(a,b))        # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the startof a sentence&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(a,b))  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the start of a sentence&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we define a and b as strings. What paste and paste0 do are combine these strings into one string. We can see that paste places a space between the two strings while paste0 does not. paste0 comes in quite handy for working with file pathing as we will see. Yes it’s that easy!&lt;/p&gt;
&lt;p&gt;We will not be using this for this project but it may be useful to know we can concatenate two vectors of strings as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a&amp;lt;-c(&amp;quot;This is a the start&amp;quot;, &amp;quot;Now we have&amp;quot;, &amp;quot;This really is&amp;quot;, &amp;quot;Economics is&amp;quot;)  # 1
b&amp;lt;-c(&amp;quot;of a sentence.&amp;quot;, &amp;quot;another sentence.&amp;quot;, &amp;quot;quite handy.&amp;quot;, &amp;quot;awesome!&amp;quot;)       # 2
print(paste(a,b))                                                             # 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is a the start of a sentence.&amp;quot; &amp;quot;Now we have another sentence.&amp;quot;     
## [3] &amp;quot;This really is quite handy.&amp;quot;        &amp;quot;Economics is awesome!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t want to get into too many details here but R has some very useful functions for dealing with/cleaning strings. I will be writing another post on this in the coming weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;string-padding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String Padding&lt;/h2&gt;
&lt;p&gt;Consider an example that will become relevant in coming lessons. We have a vector of numbers which currently runs 1-19. Now what if we need all the ‘single character’ digits to have a leading one. That is instead of “1” we need “01”.&lt;/p&gt;
&lt;p&gt;We could use paste0 as above and combine a 0 with our vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbvec&amp;lt;-as.character(1:19)  # 1
print(paste0(&amp;quot;0&amp;quot;, numbvec))  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;01&amp;quot;  &amp;quot;02&amp;quot;  &amp;quot;03&amp;quot;  &amp;quot;04&amp;quot;  &amp;quot;05&amp;quot;  &amp;quot;06&amp;quot;  &amp;quot;07&amp;quot;  &amp;quot;08&amp;quot;  &amp;quot;09&amp;quot;  &amp;quot;010&amp;quot; &amp;quot;011&amp;quot; &amp;quot;012&amp;quot;
## [13] &amp;quot;013&amp;quot; &amp;quot;014&amp;quot; &amp;quot;015&amp;quot; &amp;quot;016&amp;quot; &amp;quot;017&amp;quot; &amp;quot;018&amp;quot; &amp;quot;019&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we don’t want a leading 0 in front of the double ‘character’ digits (ie We DON’T want “090”). We could break our vector into single character digits and two character digits, manipulate the single character digits, then combine it back in with the double character digits. But there is an easier way: str_pad !&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(stringr)  # 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: stringr&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbvec&amp;lt;-as.character(1:19)                # 1
print(str_pad(numbvec, 2, &amp;quot;left&amp;quot;, &amp;quot;0&amp;quot;)  )  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;01&amp;quot; &amp;quot;02&amp;quot; &amp;quot;03&amp;quot; &amp;quot;04&amp;quot; &amp;quot;05&amp;quot; &amp;quot;06&amp;quot; &amp;quot;07&amp;quot; &amp;quot;08&amp;quot; &amp;quot;09&amp;quot; &amp;quot;10&amp;quot; &amp;quot;11&amp;quot; &amp;quot;12&amp;quot; &amp;quot;13&amp;quot; &amp;quot;14&amp;quot; &amp;quot;15&amp;quot;
## [16] &amp;quot;16&amp;quot; &amp;quot;17&amp;quot; &amp;quot;18&amp;quot; &amp;quot;19&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this looks like what we want! But what is str_pad doing? With str_pad we are telling stringr we want all elements of numbvec to be of length 2. So stringr checks to see if the elements are less than 2 characters, if an element is it adds “0”’s to the left side until it reaches length 2. If it is already length 2, it will leave it alone.&lt;/p&gt;
&lt;p&gt;There is many other handy commands to deal with strings in R. These are just a couple of commands we will be using. I will be writing a post with some other handy functions in the coming weeks and will link it here.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Downloading/Reading Data</title>
      <link>/courses/rcourse/lesson1/lesson1_04/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_04/</guid>
      <description>


&lt;div id=&#34;downloading-within-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading within R&lt;/h2&gt;
&lt;p&gt;We can use R to with a direct link to download. The first argument the download.file() command takes that we will use is the url of the xslx document and the second argument is the destination it will be saved. The last argument is basically telling R that the excel docs are not plain text. (Don’t forget to have workingdir defined as we did in &lt;a href=&#34;https://jmwestenberg.github.io/courses/rcourse/lesson1_01/&#34;&gt;Lesson 1.1&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://www.bls.gov/lau/laucnty90.xlsx&amp;quot;,              # 1
  paste0(workingdir, &amp;quot;/raw_data/&amp;quot;, &amp;quot;bls_unemp_90.xlsx&amp;quot;), mode=&amp;quot;wb&amp;quot;)  # 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-in-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading in Data&lt;/h2&gt;
&lt;p&gt;Before we read in this data to R, let’s see what we are dealing with. Opening up the file in excel we can see there will be issues reading the file in.
&lt;img src=&#34;/img/rcourse/data_head.png&#34; alt=&#34;data head&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can notice that the first row has the file title spread across columns A:J. Variable names are spread across anywhere 1-3 rows. And lastly we have an empty column in F. The bright side is if we observe the other year’s files, they all have this exact same structure. Hence we will able to use a loop eventually to clean them all instead of one at a time.&lt;/p&gt;
&lt;p&gt;The main package we will be using is readxl, which is quite self explanatory. It is a package meant to help to read in excel docs. Let’s try to open the file for 1990 we downloaded in R. We can do this through R Studio’s functionality.&lt;/p&gt;
&lt;p&gt;Within the “Environment” area of R Studio, click Import Dataset, then From Excel…
&lt;img src=&#34;/img/rcourse/import_fromexcel.png&#34; alt=&#34;import&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is definitely multiple ways to do this, as we can see from the options available. I first deselect “First Row as Names” (This option is very nice if your data is already in a precleaned form and your first row simply has your variable names.) I then begin to skip rows, 5 rows of skipping leads to the first row being the first row of data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/rcourse/import_fromexceloptions.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next we can handle column F that we noticed was plank. This is column 6 and stays consistent across all years (you can check this). Remembering our lessons from the Very Basics section we can subset this dataframe by removing column 6.&lt;/p&gt;
&lt;p&gt;Hence we have something that will look like the following for our command for our script.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(readxl)                                                                                                                                     # 1
workingdir&amp;lt;-&amp;quot;C:/Users/weste/Documents/GitHub/Rcourse&amp;quot;                                                                                               # 2
bls_unemp_90 &amp;lt;- read_excel(paste0(workingdir, &amp;quot;/raw_data/bls_unemp_90.xlsx&amp;quot;), col_names=FALSE, skip=5)                                              # 3
bls_unemp_90&amp;lt;-bls_unemp_90[,-6]                                                                                                                     # 4
col_names(bls_unemp_90)&amp;lt;-c(&amp;quot;LAUS_code&amp;quot;, &amp;quot;State_fips&amp;quot;, &amp;quot;County_fips&amp;quot;, &amp;quot;County_name&amp;quot;, &amp;quot;Year&amp;quot;, &amp;quot;Labor_force&amp;quot;, &amp;quot;Employed&amp;quot;, &amp;quot;Unemployed&amp;quot;, &amp;quot;Unemp_rate&amp;quot;)  # 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the last line above we are giving our columns names based on the names we saw in the excel document.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;downloadingreading-data-in-a-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading/Reading Data in a Loop&lt;/h2&gt;
&lt;p&gt;Here is a good place to pause if you want a challenge. You should have all the tools needed to write a loop to download all files from 1990-2019.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Download Loop</title>
      <link>/courses/rcourse/lesson1/lesson1_05/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/courses/rcourse/lesson1/lesson1_05/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(stringr)                                                                # 1
require(readxl)                                                                 # 2
county_data&amp;lt;-data.frame()                                                       # 3
years&amp;lt;-c(90:99, 0:19)                                                           # 4
years&amp;lt;-str_pad(as.character(years), 2, &amp;quot;left&amp;quot;, &amp;quot;0&amp;quot;)                             # 5
years_l&amp;lt;-length(years)                                                          # 6
for (i in 1:years_l){                                                           # 7
url&amp;lt;-paste0(&amp;quot;https://www.bls.gov/lau/laucnty&amp;quot;, years[i], &amp;quot;.xlsx&amp;quot;)               # 8
destination&amp;lt;-paste0(workingdir, &amp;quot;/raw_data/bls_unemp_&amp;quot;, years[i], &amp;quot;.xlsx&amp;quot;)      # 9
download.file(url, destination, mode=&amp;quot;wb&amp;quot;)                                     # 10
temp_df &amp;lt;- read_excel(paste0(workingdir, &amp;quot;/raw_data/bls_unemp_&amp;quot;, years[i],     # 11
  &amp;quot;.xlsx&amp;quot;),col_names=FALSE, skip=5)                                            # 12
temp_df&amp;lt;-temp_df[,-6]                                                          # 13
colnames(temp_df)&amp;lt;-c(&amp;quot;LAUS_code&amp;quot;, &amp;quot;State_fips&amp;quot;, &amp;quot;County_fips&amp;quot;, &amp;quot;County_name&amp;quot;,  # 14
  &amp;quot;Year&amp;quot;, &amp;quot;Labor_force&amp;quot;, &amp;quot;Employed&amp;quot;, &amp;quot;Unemployed&amp;quot;, &amp;quot;Unemp_rate&amp;quot;)               # 15
county_data&amp;lt;-rbind(county_data, temp_df)                                       # 16
}                                                                              # 17
save(county_data, file=paste0(workingdir, &amp;quot;/processed_data/county_data_all&amp;quot;))  # 18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First let’s think what we are trying to achieve. The links for the downloads are all in the form of &lt;a href=&#34;https://www.bls.gov/lau/laucntyZZ.xlsx&#34; class=&#34;uri&#34;&gt;https://www.bls.gov/lau/laucntyZZ.xlsx&lt;/a&gt;, where ZZ is two digits representing the year. These ZZ values run from “90”to “99” for years 1990-1999 and “00” to “19” for years 2000-2019.&lt;/p&gt;
&lt;p&gt;Let’s work through the above code line by line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines #1 &amp;amp; #2: load required packages.&lt;/li&gt;
&lt;li&gt;Line #3: Declare county_data will be a data.frame. Right now it is empty, but we will add to it.&lt;/li&gt;
&lt;li&gt;Line #4: Define a vector with elements 90-99 and 0-19. (Which will correspond to the years that we will pull)&lt;/li&gt;
&lt;li&gt;Line #5 : We have a vector for years, however if we notice in the url names we need this vector to include a leading 0 in front of the single ‘character’ digits (ie “01” instead of “1”). But we don’t want a leading 0 in front of the double ‘character’ digits (ie We DON’T want “090”). Go back to the &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1_03/&#34;&gt;String Manipulation&lt;/a&gt; section if you need to refresh on this.&lt;/li&gt;
&lt;li&gt;Line #6 : Calculate the length of years and save as years_l&lt;/li&gt;
&lt;li&gt;Line #7 : See &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1_02/&#34;&gt;String Manipulation&lt;/a&gt; if defining the for loop does not make sense.&lt;/li&gt;
&lt;li&gt;Line #8 : We are creating the character string for the url for the download link. Since they all take the form of &lt;a href=&#34;https://www.bls.gov/lau/laucntyZZ.xlsx&#34; class=&#34;uri&#34;&gt;https://www.bls.gov/lau/laucntyZZ.xlsx&lt;/a&gt;, we can use one element of our years vector at a time. (See &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1_03/&#34;&gt;String Manipulation&lt;/a&gt; for explanation on paste0)&lt;/li&gt;
&lt;li&gt;Line #9 : This is of similar spirit to line #4, but this is defining the path/filename of the excel file we will save.&lt;/li&gt;
&lt;li&gt;Line #10 : This line is just telling R to download the file at that url, save it to the defined location/name, and to read it as a non-raw text form. (see &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1_04/&#34;&gt;Downloading/Reading Data&lt;/a&gt; if unclear.)&lt;/li&gt;
&lt;li&gt;Lines #11-#15: See &lt;a href=&#34;http://jmwestenberg.github.io/courses/rcourse/lesson1_04/&#34;&gt;Downloading/Reading Data&lt;/a&gt; for a direct explanation.&lt;/li&gt;
&lt;li&gt;Line #16: rbind appends data. Hence since all of our data has the same format and has a variable indicating the year, we can simply append.&lt;/li&gt;
&lt;li&gt;Line #18: save the combined data to our processed_data folder as a Rda type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We now have our data cleaned and saved for our next lesson when we will start to work with it more!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Section 301 and Politics: Analysis of Tariff Exemptions</title>
      <link>/project/sect_301/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/project/sect_301/</guid>
      <description>


&lt;p&gt;Submitted on 12/23/2020.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping with Leaflet</title>
      <link>/post/mapping-with-leaflet/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/mapping-with-leaflet/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post assumes a basic knowledge of R.&lt;/p&gt;
&lt;p&gt;Using leaflet we can map shapefiles and specific points. As an illustrative example I will be using code I wrote earlier this year when I was
looking into some political economy questions regarding schools and state government.
The shapefiles I will be using are the lower and upper legislatures for the state of
Wisconsin. The points I will be mapping in the second post of this series will be specific
school locations.&lt;/p&gt;
&lt;p&gt;The goal of this post is to explain how to make an interactive map as below.
This map allows user interaction: zooming in and out, clicking on areas
to show details of that area, removing or adding of layers (top right corner).&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2020-05-01-mapping-with-leaflet_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The main libraries we will be using are &lt;a href=&#34;https://cran.r-project.org/web/packages/tigris/tigris.pdf&#34;&gt;tigris&lt;/a&gt;
and &lt;a href=&#34;https://cran.r-project.org/web/packages/leaflet/leaflet.pdf&#34;&gt;leaflet&lt;/a&gt;.
Let’s start by loading these packages and then downloading the lower and upper legislative
district shapefiles via tigris.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tigris)                                                          # 1
library(leaflet)                                                         # 2
WiscoCdUpper&amp;lt;-state_legislative_districts(state=&amp;quot;WI&amp;quot;, house = &amp;quot;upper&amp;quot;,   # 3
  year=2013, cb=TRUE)                                                    # 4
WiscoCdLower&amp;lt;-state_legislative_districts(state=&amp;quot;WI&amp;quot;, house = &amp;quot;lower&amp;quot;,   # 5
  year=2013, cb=TRUE)                                                    # 6
centerLNG&amp;lt;--90                                                           # 7
centerLAT&amp;lt;-44.8                                                          # 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The arguments arguments are fairly self explanatory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;: the state that you want to retrieve shapefiles for. Accepts State FIPS or state abbreviation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;house&lt;/strong&gt;: indicates which legislative districts you want. Takes lower or upper as an argument&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;year&lt;/strong&gt;: the districts that were active in this year&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cb&lt;/strong&gt;: an argument for adjusting level of detail. FALSE is default and is the high detail map. TRUE returns a less detailed map.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The variables centerLNG and centerLAT are longitude and latitude coordinate that I will be using to center my map around.&lt;/p&gt;
&lt;p&gt;The interactive mapping package I use is leaflet, it will allow us to layer different shapefiles
over a base map.&lt;/p&gt;
&lt;p&gt;I first want to store this information that will be popping up to a vector to feed into leaflet’s
command. Now within our spatial polygon data frame, we can access the ID of each shape. these
take the form of SSDDD where SS is a two digit state FIPS code, and DDD is a 3 digit district
number.&lt;/p&gt;
&lt;pre class=&#34;r numCode R numberLines&#34;&gt;&lt;code&gt;districtinfo &amp;lt;- paste0(&amp;quot;Lower District: &amp;quot;, substr(WiscoCdLower$GEOID, 3, 5))  # 1
mapcolors&amp;lt;-rainbow(length(WiscoCdLower@data$GEOID))                           # 2
rnum&amp;lt;-sample(nrow(WiscoCdLower@data))                                         # 3
pal &amp;lt;- colorFactor(mapcolors[rnum], WiscoCdLower@data$GEOID)                  # 4
lowermap&amp;lt;-leaflet(options = leafletOptions(minZoom = 4)) %&amp;gt;%                  # 5
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;, group = &amp;quot;base&amp;quot;) %&amp;gt;%                    # 6
  setView(centerLNG, centerLAT, zoom = 6) %&amp;gt;%                                 # 7
  setMaxBounds(-94, 41, -85, 48) %&amp;gt;%                                          # 8
  addPolygons(data = WiscoCdLower, color = &amp;quot;white&amp;quot;, weight = 2,               # 9
    fillColor = ~pal(GEOID), fillOpacity = 0.5, popup = districtinfo,        # 10
    group = &amp;quot;Lower&amp;quot;) %&amp;gt;%                                                     # 11
  addLayersControl(baseGroups = c(&amp;quot;base&amp;quot;), overlayGroups = c(&amp;quot;Lower&amp;quot;))       # 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Going line by line:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Define the text that we want to appear in the information when users click an area of the map&lt;/li&gt;
&lt;li&gt;Define a vector of colors with length equal to the number of districts&lt;/li&gt;
&lt;li&gt;Since our code in line 2 would have similar colors next to each other, I want to shuffle the colors
to make it look better (more info &lt;a href=&#34;https://campus.datacamp.com/courses/machine-learning-with-caret-in-r/regression-models-fitting-them-and-evaluating-their-performance?ex=6&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Create a dataframe with color information and an id for each district.&lt;/li&gt;
&lt;li&gt;Leaflet conveniently allows for piping. To start the map generation, lets limit users to only be able to zoom out so far.&lt;/li&gt;
&lt;li&gt;This provides a base map where we will lay our other shapes on top of. We can label this so we can refer to
it later (in line 12).&lt;/li&gt;
&lt;li&gt;This sets the initial view, centered on a latitude and longitude point with a certain initial zoom&lt;/li&gt;
&lt;li&gt;To restrict the user from venturing too far from your area of interest you can restrict the frame of the map.
To see this, try to pull the map in any direction, you can’t get too far until it bounces you back to a relevant frame.&lt;/li&gt;
&lt;li&gt;Here is where we layer our district shapefile on top of that base map we established in line 6.
Leaflet recognizes the Spatial Polygon Dataframe as such and knows how to handle it. The color option sets the
color of the border of the districts and the weight is how thick these borders are.&lt;/li&gt;
&lt;li&gt;Continuing with the district shapefile options. To fill the shapes with different colors,
we use the colors we generated in lines 2-4. The fillOpacity command allows you to adjust
how much you can see through the shape. Notice how you can still make out information on
the base map? That’s because we set this option to less than 1. The popup option is telling
leaflet we want to see districtinfo for the area we are clicking on in the map.&lt;/li&gt;
&lt;li&gt;We can label this layer as “Lower”, this allows us to refer to it in the layers control below.&lt;/li&gt;
&lt;li&gt;Lastly, this layer control allows us to tell leaflet that we want the “base” to always be
visible on the map, but we can add/remove “Lower”. To see this in the map below click the icon
in the upper right corner. Notice how we can uncheck and recheck “Lower”? But we can’t do that
with the base map.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2020-05-01-mapping-with-leaflet_files/figure-html//widgets/widget_unnamed-chunk-6.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
We can then add an additional layer to this map with the upper house as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;districtinfo &amp;lt;- paste0(&amp;quot;Lower District: &amp;quot;, substr(WiscoCdLower$GEOID,3,5),  # 1
  &amp;quot; &amp;lt;br&amp;gt; &amp;quot;, &amp;quot;Upper District: &amp;quot;, substr(WiscoCdUpper$GEOID,3,5))             # 2
loweranduppermap&amp;lt;-leaflet(options = leafletOptions(minZoom = 4)) %&amp;gt;%        # 3
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;, group = &amp;quot;base&amp;quot;) %&amp;gt;%                  # 4
  setView(centerLNG, centerLAT, zoom = 6) %&amp;gt;%                               # 5
  setMaxBounds(-94, 41, -85, 48) %&amp;gt;%                                        # 6
  addPolygons(data = WiscoCdLower, color = &amp;quot;white&amp;quot;, weight = 2,             # 7
    fillColor = ~pal(GEOID), fillOpacity = 0.5,                             # 8
    popup = districtinfo, group = &amp;quot;Lower&amp;quot;) %&amp;gt;%                              # 9
  addPolygons(data = WiscoCdUpper, weight =2, opacity = 1,                 # 10
    color = &amp;quot;black&amp;quot;, fill = FALSE, group = &amp;quot;Upper&amp;quot;) %&amp;gt;%                    # 11
  addLayersControl(baseGroups = c(&amp;quot;base&amp;quot;),                                 # 12
    overlayGroups = c(&amp;quot;Upper&amp;quot;, &amp;quot;Lower&amp;quot;))                                   # 13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are only a few changes we needed to make. In line 1 and 2 we define our pop up
to show information on both the lower and upper legislative districts. In lines 10 and 11
we add in the upper house as an additional layer. Setting fill to false we can just have the
boundary of the upper legislative districts, this will allow us to see through to the lower
legislative district layer. And lastly in line 12 and 13 we add our upper legislative districts
into the map. Notice if you open the layer control in the map below (upper right corner), you
can now check/uncheck both the lower and the upper legislative districts.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2020-05-01-mapping-with-leaflet_files/figure-html//widgets/widget_unnamed-chunk-8.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Time Flexibility, Women’s Wages, and the Gender Wage Gap</title>
      <link>/publication/journal-article/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/publication/journal-article/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
